[
  {
    "objectID": "reference/quadratic_congrential_generator.html",
    "href": "reference/quadratic_congrential_generator.html",
    "title": "quadratic_congrential_generator",
    "section": "",
    "text": "quadratic_congrential_generator(self, **kwargs)\ncongruential quadratic pseudorandom generators\n\n\n\n\n\nName\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nquadratic_congrential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`quadratic_congrential_generator`"
    ]
  },
  {
    "objectID": "reference/quadratic_congrential_generator.html#methods",
    "href": "reference/quadratic_congrential_generator.html#methods",
    "title": "quadratic_congrential_generator",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nquadratic_congrential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`quadratic_congrential_generator`"
    ]
  },
  {
    "objectID": "reference/multiplicative_congruential_generator.html",
    "href": "reference/multiplicative_congruential_generator.html",
    "title": "multiplicative_congruential_generator",
    "section": "",
    "text": "multiplicative_congruential_generator(self, **kwargs)\ncongruential multiplicative pseudorandom generators\nPseudorandom generator based on the multiplicative congruential method. Initialization must be made with keywords for all parameters.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmod\nint\nModule for residual reduction\nrequired\n\n\nmult\nint\nMultiplier\nrequired\n\n\nseed\nint\ninitial value\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nmultiplicative_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`multiplicative_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/multiplicative_congruential_generator.html#other-parameters",
    "href": "reference/multiplicative_congruential_generator.html#other-parameters",
    "title": "multiplicative_congruential_generator",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nmod\nint\nModule for residual reduction\nrequired\n\n\nmult\nint\nMultiplier\nrequired\n\n\nseed\nint\ninitial value\nrequired",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`multiplicative_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/multiplicative_congruential_generator.html#methods",
    "href": "reference/multiplicative_congruential_generator.html#methods",
    "title": "multiplicative_congruential_generator",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nmultiplicative_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`multiplicative_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/multcombi_congruential_generator.html",
    "href": "reference/multcombi_congruential_generator.html",
    "title": "multcombi_congruential_generator",
    "section": "",
    "text": "multcombi_congruential_generator\nmultcombi_congruential_generator(self, **kwargs)\nmultiple combined congruential pseudorandom generator",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`multcombi_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "sim_2024",
    "section": "",
    "text": "Que pondremos aca\n\n\n\nmultiplicative_congruential_generator\ncongruential multiplicative pseudorandom generators\n\n\nlinear_congruential_generator\ncongruential linear pseudorandom generators\n\n\nquadratic_congrential_generator\ncongruential quadratic pseudorandom generators\n\n\npolynomial_congruential_generator\ncongruential polynomial pseudorandom generator\n\n\nmultiple_congruential_generator\nmultiple congruential pseudorandom generator\n\n\ncombined_congruential_generator\ncombined congruential pseudorandom generator\n\n\nmultcombi_congruential_generator\nmultiple combined congruential pseudorandom generator"
  },
  {
    "objectID": "reference/index.html#pseudorandom-number-generators-prng",
    "href": "reference/index.html#pseudorandom-number-generators-prng",
    "title": "sim_2024",
    "section": "",
    "text": "Que pondremos aca\n\n\n\nmultiplicative_congruential_generator\ncongruential multiplicative pseudorandom generators\n\n\nlinear_congruential_generator\ncongruential linear pseudorandom generators\n\n\nquadratic_congrential_generator\ncongruential quadratic pseudorandom generators\n\n\npolynomial_congruential_generator\ncongruential polynomial pseudorandom generator\n\n\nmultiple_congruential_generator\nmultiple congruential pseudorandom generator\n\n\ncombined_congruential_generator\ncombined congruential pseudorandom generator\n\n\nmultcombi_congruential_generator\nmultiple combined congruential pseudorandom generator"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sim_2024 ",
    "section": "",
    "text": "El paquete sim_2024 es un paquete básico de simulación estocástica construido dentro del curso Simulación Estocástica que se impartio en el periodo agosto-noviembre de 2024 en el programa de Acturía de la Universidad La Salle México.\n\n\nEste paquete contiene los siguientes modulos\n\ngenerators: aqui se implementan algunos generadores de números pseudoaleatorios (PRNG por sus siglas en ingles) simples. Ninguno de estos generadores tiene la intención de ser utilizado más que con fines didácticos.\npruebas: en este módulo se implementan algunas pruebas empíricas de aleatoriedad que son aplicables a los PRNG contenidos en el módulo generators así como una batería de pruebas para facilitar el análisis de muestras.\nvariates: este modulo contiene representaciones de las variables aleatorias más utilizadas en el contexto actuarial. Esto inclute distribuciones discretas y continuas univariadas, así como las distribuciónes mutinormal y multinomial como únicos ejemplos de distribuciones multivariadas.\nprocesses: aqui se han implementado representaciones del proceso de Wiener, del proceso de Poisson homogeneo y del proceso de Poisson no-homogeneo de tasa acotada.\n\nEn toda el paquete se utilizan las definiciones y la terminología estandar de probabilidad y estadística. Para cualquier referencia sugerimos consultar la página Wikipedia.\n\n\n\nLos módulos descritos son independientes, por lo que es necesario importarlos de forma independiente. Por ejemplo, para recrear el infame PRNG RANDU del lenguaje Basic utilizariamos\n\nimport generators\nRANDU = generators.multiplicative_congruential_generator(mod=2**31,mult=65539,seed=14501)\n\nCualquier generador pseudoaleatorio tiene dos métodos: rand y sample. El método rand se utiliza para obtener un número pseudoaleatorio, mientras que sample se emplea cuando se desea obtener una lista de números pseudoaleatorios.\nThe pins package also includes boards that allow you to share data on services like Amazon’s S3 (), Google Cloud Storage (), and Azure blob storage ().\n\n\n\n\nHéctor Hugo Corrales Sánchez, hhcorrales@gmail.com."
  },
  {
    "objectID": "index.html#contenido",
    "href": "index.html#contenido",
    "title": "sim_2024 ",
    "section": "",
    "text": "Este paquete contiene los siguientes modulos\n\ngenerators: aqui se implementan algunos generadores de números pseudoaleatorios (PRNG por sus siglas en ingles) simples. Ninguno de estos generadores tiene la intención de ser utilizado más que con fines didácticos.\npruebas: en este módulo se implementan algunas pruebas empíricas de aleatoriedad que son aplicables a los PRNG contenidos en el módulo generators así como una batería de pruebas para facilitar el análisis de muestras.\nvariates: este modulo contiene representaciones de las variables aleatorias más utilizadas en el contexto actuarial. Esto inclute distribuciones discretas y continuas univariadas, así como las distribuciónes mutinormal y multinomial como únicos ejemplos de distribuciones multivariadas.\nprocesses: aqui se han implementado representaciones del proceso de Wiener, del proceso de Poisson homogeneo y del proceso de Poisson no-homogeneo de tasa acotada.\n\nEn toda el paquete se utilizan las definiciones y la terminología estandar de probabilidad y estadística. Para cualquier referencia sugerimos consultar la página Wikipedia."
  },
  {
    "objectID": "index.html#uso",
    "href": "index.html#uso",
    "title": "sim_2024 ",
    "section": "",
    "text": "Los módulos descritos son independientes, por lo que es necesario importarlos de forma independiente. Por ejemplo, para recrear el infame PRNG RANDU del lenguaje Basic utilizariamos\n\nimport generators\nRANDU = generators.multiplicative_congruential_generator(mod=2**31,mult=65539,seed=14501)\n\nCualquier generador pseudoaleatorio tiene dos métodos: rand y sample. El método rand se utiliza para obtener un número pseudoaleatorio, mientras que sample se emplea cuando se desea obtener una lista de números pseudoaleatorios.\nThe pins package also includes boards that allow you to share data on services like Amazon’s S3 (), Google Cloud Storage (), and Azure blob storage ()."
  },
  {
    "objectID": "index.html#autor",
    "href": "index.html#autor",
    "title": "sim_2024 ",
    "section": "",
    "text": "Héctor Hugo Corrales Sánchez, hhcorrales@gmail.com."
  },
  {
    "objectID": "generators.html",
    "href": "generators.html",
    "title": "sim_2024",
    "section": "",
    "text": "Aqui vamos a poner cosas sobre el apartado de generadores"
  },
  {
    "objectID": "get_started.html",
    "href": "get_started.html",
    "title": "sim_2024",
    "section": "",
    "text": "Aqui vamos a poner una introducción\n\nRANDU = multiplicative_congruential_generator(mod=2**31,mult=65539,seed=14501)\n\nY no se que va aqui"
  },
  {
    "objectID": "reference/combined_congruential_generator.html",
    "href": "reference/combined_congruential_generator.html",
    "title": "combined_congruential_generator",
    "section": "",
    "text": "combined_congruential_generator(self, **kwargs)\ncombined congruential pseudorandom generator\n\n\n\n\n\nName\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\ncombined_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`combined_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/combined_congruential_generator.html#methods",
    "href": "reference/combined_congruential_generator.html#methods",
    "title": "combined_congruential_generator",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\ncombined_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`combined_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/linear_congruential_generator.html",
    "href": "reference/linear_congruential_generator.html",
    "title": "linear_congruential_generator",
    "section": "",
    "text": "linear_congruential_generator(self, **kwargs)\ncongruential linear pseudorandom generators\n\n\n\n\n\nName\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nlinear_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`linear_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/linear_congruential_generator.html#methods",
    "href": "reference/linear_congruential_generator.html#methods",
    "title": "linear_congruential_generator",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nlinear_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`linear_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/multiple_congruential_generator.html",
    "href": "reference/multiple_congruential_generator.html",
    "title": "multiple_congruential_generator",
    "section": "",
    "text": "multiple_congruential_generator(self, **kwargs)\nmultiple congruential pseudorandom generator\n\n\n\n\n\nName\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nmultiple_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`multiple_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/multiple_congruential_generator.html#methods",
    "href": "reference/multiple_congruential_generator.html#methods",
    "title": "multiple_congruential_generator",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\nmultiple_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`multiple_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/polynomial_congruential_generator.html",
    "href": "reference/polynomial_congruential_generator.html",
    "title": "polynomial_congruential_generator",
    "section": "",
    "text": "polynomial_congruential_generator(self, **kwargs)\ncongruential polynomial pseudorandom generator\n\n\n\n\n\nName\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\npolynomial_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`polynomial_congruential_generator`"
    ]
  },
  {
    "objectID": "reference/polynomial_congruential_generator.html#methods",
    "href": "reference/polynomial_congruential_generator.html#methods",
    "title": "polynomial_congruential_generator",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrand\ngeneration of one pseudo-random number\n\n\n\n\n\npolynomial_congruential_generator.rand()\ngeneration of one pseudo-random number",
    "crumbs": [
      "Get started",
      "PseudoRandom Number Generators (PRNG)",
      "`polynomial_congruential_generator`"
    ]
  }
]